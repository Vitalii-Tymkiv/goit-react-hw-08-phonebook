{"version":3,"file":"static/js/749.5d365ec5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","UI/SectionWrapper/SectionWrapper.styled.js","UI/SectionWrapper/SectionWrapper.jsx","components/ContactForm/ContactForm.styled.js","UI/AlertMessage/AlertMessage.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/InfoMessage/InfoMessage.styled.js","components/InfoMessage/InfoMessage.jsx","components/pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 35px;\n  padding-bottom: 35px;\n  background-color: #fff;\n  padding-left: 24px;\n  padding-right: 24px;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  border: 1px solid rgba(128, 128, 128, 0.4);\n  margin-bottom: 30px;\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 15px;\n`;\n","import { Section, Title } from './SectionWrapper.styled';\nimport PropTypes from 'prop-types';\n\nexport const SectionWrapper = ({ title, children }) => {\n  return (\n    <Section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Section>\n  );\n};\n\nSectionWrapper.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  height: 40px;\n  margin-left: 10px;\n  padding: 8px;\n  font-size: 18px;\n  color: #212121;\n  border-radius: 4px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  cursor: pointer;\n`;\n\nexport const Btn = styled.button`\n  margin-left: 10px;\n  cursor: pointer;\n  color: #7366ff;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: rgba(115, 102, 255, 0.15);\n  transition: all 0.3s ease;\n  border: none;\n  text-align: center;\n\n  &:hover {\n    color: #fff;\n    background-color: #7366ff;\n  }\n`;\n","import { Notify } from 'notiflix';\n\nconst notifyOptions = {\n  position: 'center-top',\n  fontSize: '16px',\n  clickToClose: true,\n  width: '450px',\n  timeout: 4000,\n};\n\nexport function showAlertMessage(value) {\n  Notify.warning(`${value} is already in contacts.`, notifyOptions);\n}\n","import { Input, Btn } from './ContactForm.styled';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { showAlertMessage } from 'UI/AlertMessage/AlertMessage';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const handleCheckContact = name => {\n      const isExistContact = contacts.find(contact => contact.name === name);\n      isExistContact && showAlertMessage(name);\n      return isExistContact;\n    };\n    const normName = name.trim();\n    if (handleCheckContact(name)) return;\n    dispatch(addContact({ name: normName, phone }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"Enter Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChangeForm}\n      ></Input>\n\n      <Input\n        type=\"text\"\n        name=\"phone\"\n        value={phone}\n        placeholder=\"Enter Phone Number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChangeForm}\n      ></Input>\n\n      <Btn type=\"submit\">Add Contact</Btn>\n    </form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  width: 290px;\n  margin-bottom: 20px;\n`;\n\nexport const LabelName = styled.span`\n  padding-bottom: 4px;\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  padding: 8px;\n  font-size: 18px;\n  color: #212121;\n  border-radius: 4px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  cursor: pointer;\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Label, LabelName, Input } from './Filter.styled';\nimport { GoSearch } from 'react-icons/go';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter);\n\n  const handleInput = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n  const filterId = nanoid();\n  return (\n    <Label>\n      <LabelName>\n        <GoSearch style={{ verticalAlign: 'middle', marginRight: '5px' }} />\n        Find contacts by name\n      </LabelName>\n      <Input\n        id={filterId}\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        placeholder=\"Enter Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleInput}\n      ></Input>\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  width: 390px;\n  margin: 10px auto;\n`;\n\nexport const Name = styled.span`\n  display: inline-block;\n  width: 250px;\n`;\n\nexport const Btn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: #fff;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: #e17c63;\n  border: none;\n  transition: all 0.3s ease;\n\n  &:hover {\n    color: #fff;\n    background-color: #f51e10;\n  }\n`;\n","import { ContactItem, Name, Btn } from './Contact.styled';\nimport PropTypes from 'prop-types';\nimport { RiDeleteBin6Fill } from 'react-icons/ri';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItem>\n      <Name>\n        {name}: {phone}\n      </Name>\n      <Btn\n        type=\"button\"\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n        <RiDeleteBin6Fill style={{ marginLeft: '5px' }} />\n      </Btn>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  background-color: rgb(235, 235, 235);\n`;\n","import { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport { Contact } from '../Contact/Contact';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, phone, id }) => (\n        <Contact key={id} id={id} name={name} phone={phone} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  text-align: center;\n  color: tomato;\n  font-size: 24px;\n`;\n","import { Message } from './InfoMessage.styled';\n\nexport const InfoMessage = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../../redux/contacts/selectors';\n\nimport { SectionWrapper } from '../../UI/SectionWrapper/SectionWrapper';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { InfoMessage } from '../InfoMessage/InfoMessage';\nimport { Spinner } from '../../UI/Spinner/Spinner';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <SectionWrapper title=\"Phonebook\">\n        <ContactForm />\n      </SectionWrapper>\n\n      <SectionWrapper title=\"Contact List\">\n        {isLoading && !error && <Spinner />}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <InfoMessage message={'Contact List is empty'} />\n        )}\n      </SectionWrapper>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Section","styled","Title","SectionWrapper","title","children","Input","Btn","notifyOptions","position","fontSize","clickToClose","width","timeout","ContactForm","useState","name","setName","phone","setPhone","useSelector","dispatch","useDispatch","handleChangeForm","target","value","resetForm","onSubmit","event","preventDefault","normName","trim","isExistContact","find","contact","Notify","handleCheckContact","addContact","type","placeholder","pattern","required","onChange","Label","LabelName","Filter","filterId","nanoid","style","verticalAlign","marginRight","id","filterContacts","ContactItem","Name","Contact","onClick","deleteContact","marginLeft","List","ContactList","normalizedFilter","toLowerCase","visibleContacts","includes","map","Message","InfoMessage","message","Contacts","useEffect","fetchContacts","Spinner","length"],"sourceRoot":""}