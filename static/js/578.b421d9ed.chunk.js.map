{"version":3,"file":"static/js/578.b421d9ed.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","UI/SectionWrapper/SectionWrapper.styled.js","UI/SectionWrapper/SectionWrapper.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/InfoMessage/InfoMessage.styled.js","components/InfoMessage/InfoMessage.jsx","components/pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 35px;\n  padding-bottom: 35px;\n  background-color: #fff;\n  padding-left: 24px;\n  padding-right: 24px;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  border: 1px solid rgba(128, 128, 128, 0.4);\n  margin-bottom: 30px;\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 15px;\n`;\n","import { Section, Title } from './SectionWrapper.styled';\nimport PropTypes from 'prop-types';\n\nexport const SectionWrapper = ({ title, children }) => {\n  return (\n    <Section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Section>\n  );\n};\n\nSectionWrapper.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  height: 40px;\n  margin-left: 10px;\n  padding: 8px;\n  font-size: 18px;\n  color: #728697;\n  border-radius: 4px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  cursor: pointer;\n`;\n\nexport const Btn = styled.button`\n  margin-left: 10px;\n  cursor: pointer;\n  color: #7366ff;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: rgba(115, 102, 255, 0.15);\n  transition: all 0.3s ease;\n  border: none;\n  text-align: center;\n\n  &:hover {\n    color: #fff;\n    background-color: #7366ff;\n  }\n`;\n","import { useState } from 'react';\nimport { Input, Btn } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const type = e.target.name;\n    switch (type) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'number':\n        setPhone(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      reset();\n\n      return Notiflix.Notify.info(`${name} is already in contacts`);\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        value={name}\n        onChange={handleChange}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <Input\n        value={number}\n        onChange={handleChange}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter Phone Number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <Btn type=\"submit\">Add contacts</Btn>\n    </form>\n  );\n};\n\n// import { Input, Btn } from './ContactForm.styled';\n\n// import { selectContacts } from 'redux/contacts/selectors';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useState } from 'react';\n// import { addContact } from 'redux/contacts/operations';\n// import { showAlertMessage } from 'UI/AlertMessage/AlertMessage';\n\n// export const ContactForm = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n//   const contacts = useSelector(selectContacts);\n//   const dispatch = useDispatch();\n\n//   const handleChangeForm = ({ target }) => {\n//     const { name, value } = target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n\n//     const handleCheckContact = name => {\n//       const isExistContact = contacts.find(contact => contact.name === name);\n//       isExistContact && showAlertMessage(name);\n//       return isExistContact;\n//     };\n//     const normName = name.trim();\n//     if (handleCheckContact(name)) return;\n//     dispatch(addContact({ name: normName, number }));\n//     resetForm();\n//   };\n\n//   const resetForm = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <Input\n//         type=\"text\"\n//         name=\"name\"\n//         value={name}\n//         placeholder=\"Enter Name\"\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         required\n//         onChange={handleChangeForm}\n//       ></Input>\n\n//       <Input\n//         type=\"text\"\n//         name=\"number\"\n//         value={number}\n//         placeholder=\"Enter Phone Number\"\n//         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//         required\n//         onChange={handleChangeForm}\n//       ></Input>\n\n//       <Btn type=\"submit\">Add Contact</Btn>\n//     </form>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  width: 290px;\n  margin-bottom: 20px;\n`;\n\nexport const LabelName = styled.span`\n  padding-bottom: 4px;\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  padding: 8px;\n  font-size: 18px;\n  color: #212121;\n  border-radius: 4px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  cursor: pointer;\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Label, LabelName, Input } from './Filter.styled';\nimport { GoSearch } from 'react-icons/go';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter);\n\n  const handleInput = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n  const filterId = nanoid();\n  return (\n    <Label>\n      <LabelName>\n        <GoSearch style={{ verticalAlign: 'middle', marginRight: '5px' }} />\n        Find contacts by name\n      </LabelName>\n      <Input\n        id={filterId}\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        placeholder=\"Enter Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleInput}\n      ></Input>\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  width: 390px;\n  margin: 10px auto;\n`;\n\nexport const Name = styled.span`\n  display: inline-block;\n  width: 250px;\n  color: #728697;\n`;\n\nexport const Btn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: #fff;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: #728697;\n  border: none;\n  transition: all 0.3s ease;\n\n  &:hover {\n    color: #fff;\n    background-color: #cfa78b;\n  }\n`;\n","import { ContactItem, Name, Btn } from './Contact.styled';\nimport PropTypes from 'prop-types';\nimport { RiDeleteBin6Fill } from 'react-icons/ri';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItem>\n      <Name>\n        {name}: {number}\n      </Name>\n      <Btn\n        type=\"button\"\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n        <RiDeleteBin6Fill style={{ marginLeft: '5px' }} />\n      </Btn>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  background-color: rgb(235, 235, 235);\n`;\n","import { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport { Contact } from '../Contact/Contact';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, number, id }) => (\n        <Contact key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  text-align: center;\n  color: tomato;\n  font-size: 24px;\n`;\n","import { Message } from './InfoMessage.styled';\n\nexport const InfoMessage = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../../redux/contacts/selectors';\n\nimport { SectionWrapper } from '../../UI/SectionWrapper/SectionWrapper';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { InfoMessage } from '../InfoMessage/InfoMessage';\nimport { Spinner } from '../../UI/Spinner/Spinner';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <SectionWrapper title=\"Phonebook\">\n        <ContactForm />\n      </SectionWrapper>\n\n      <SectionWrapper title=\"Contact List\">\n        {isLoading && !error && <Spinner />}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <InfoMessage message={'Contact List is empty'} />\n        )}\n      </SectionWrapper>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Section","styled","Title","SectionWrapper","title","children","Input","Btn","ContactForm","useState","name","setName","number","setPhone","useSelector","dispatch","useDispatch","handleChange","e","target","currentTarget","value","reset","onSubmit","preventDefault","form","elements","some","contact","toLowerCase","Notiflix","addContact","onChange","type","placeholder","pattern","required","Label","LabelName","Filter","filterId","nanoid","style","verticalAlign","marginRight","id","event","filterContacts","ContactItem","Name","Contact","onClick","deleteContact","marginLeft","List","ContactList","normalizedFilter","visibleContacts","includes","map","Message","InfoMessage","message","Contacts","useEffect","fetchContacts","Spinner","length"],"sourceRoot":""}