{"version":3,"file":"static/js/380.7388c0b2.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","UI/SectionWrapper/SectionWrapper.styled.js","UI/SectionWrapper/SectionWrapper.jsx","components/ContactForm/ContactForm.styled.js","UI/AlertMessage/AlertMessage.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/InfoMessage/InfoMessage.styled.js","components/InfoMessage/InfoMessage.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 35px;\n  padding-bottom: 35px;\n  background-color: #fff;\n  padding-left: 24px;\n  padding-right: 24px;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  margin-bottom: 30px;\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 15px;\n  color: #728697;\n`;\n","import { Section, Title } from './SectionWrapper.styled';\nimport PropTypes from 'prop-types';\n\nexport const SectionWrapper = ({ title, children }) => {\n  return (\n    <Section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Section>\n  );\n};\n\nSectionWrapper.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  align-items: center;\n  margin-left: 16px;\n  margin-top: 9px;\n  cursor: pointer;\n  color: #b1c8dd;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: #728697;\n  border: transparent;\n  transition: all 0.3s ease;\n  box-shadow: rgba(0, 0, 0, 0.07) 0px 1px 1px, rgba(0, 0, 0, 0.07) 0px 2px 2px,\n    rgba(0, 0, 0, 0.07) 0px 4px 4px, rgba(0, 0, 0, 0.07) 0px 8px 8px,\n    rgba(0, 0, 0, 0.07) 0px 16px 16px;\n\n  cursor: pointer;\n  transition: all 250ms ease-out;\n\n  :hover {\n    color: #fff;\n    background-color: #515e69;\n  }\n`;\n","import { Notify } from 'notiflix';\n\nconst notifyOptions = {\n  position: 'center-top',\n  fontSize: '16px',\n  clickToClose: true,\n  width: '450px',\n  timeout: 2000,\n  backOverlay: true,\n  warning: {\n    background: '#728697',\n    notiflixIconColor: '#fff',\n  },\n};\n\nexport function showAlertMessage(value) {\n  Notify.warning(`${value} is already in contacts.`, notifyOptions);\n}\n","import { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button } from './ContactForm.styled';\nimport { showAlertMessage } from 'UI/AlertMessage/AlertMessage';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { indigo } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: indigo[500],\n    },\n    secondary: {\n      main: '#728697',\n    },\n  },\n});\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeForm = e => {\n    const type = e.target.name;\n    switch (type) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'number':\n        setPhone(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      reset();\n\n      return showAlertMessage(name);\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <ThemeProvider theme={theme}>\n        <TextField\n          value={name}\n          onChange={handleChangeForm}\n          type=\"text\"\n          name=\"name\"\n          label=\"Enter Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required={true}\n          variant=\"outlined\"\n          color=\"secondary\"\n        />\n      </ThemeProvider>\n      <ThemeProvider theme={theme}>\n        <TextField\n          value={number}\n          onChange={handleChangeForm}\n          type=\"tel\"\n          name=\"number\"\n          label=\"Enter Phone Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required={true}\n          variant=\"outlined\"\n          sx={{ ml: 2 }}\n          color=\"secondary\"\n        />\n      </ThemeProvider>\n      <Button type=\"submit\" variant=\"contained\" sx={{ ml: 2, mt: 1.2 }}>\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  width: 600px;\n  margin-bottom: 20px;\n`;\n\nexport const LabelName = styled.span`\n  padding-bottom: 4px;\n  font-size: 16px;\n  /* font-weight: 500; */\n  color: #728697;\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  padding: 8px;\n  font-size: 18px;\n  color: #212121;\n  border-radius: 4px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  cursor: pointer;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Wrapper } from './Filter.styled';\nimport { indigo } from '@mui/material/colors';\nimport TextField from '@mui/material/TextField';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: indigo[500],\n    },\n    secondary: {\n      main: '#728697',\n    },\n  },\n});\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter);\n\n  const handleInput = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <Wrapper>\n      {/* <LabelName>\n        <GoSearch style={{ verticalAlign: 'middle', marginRight: '5px' }} />\n        Find contacts by name\n      </LabelName> */}\n      <ThemeProvider theme={theme}>\n        <TextField\n          fullWidth\n          label=\"Find contacts by name\"\n          type=\"text\"\n          name=\"name\"\n          value={filter}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required={true}\n          variant=\"standard\"\n          margin=\"normal\"\n          color=\"secondary\"\n          size=\"normal\"\n          onChange={handleInput}\n        ></TextField>\n      </ThemeProvider>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  width: 390px;\n  margin: 10px auto;\n`;\n\nexport const Name = styled.span`\n  display: inline-block;\n  width: 250px;\n  color: #728697;\n`;\n\nexport const Btn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: #b1c8dd;\n  font-weight: 500;\n  padding: 10px 15px;\n  border-radius: 5px;\n  background-color: #728697;\n  border: none;\n  transition: all 250ms ease-out;\n  box-shadow: rgba(0, 0, 0, 0.07) 0px 1px 1px, rgba(0, 0, 0, 0.07) 0px 2px 2px,\n    rgba(0, 0, 0, 0.07) 0px 4px 4px, rgba(0, 0, 0, 0.07) 0px 8px 8px,\n    rgba(0, 0, 0, 0.07) 0px 16px 16px;\n\n  &:hover {\n    color: #fff;\n    background-color: #515e69;\n  }\n`;\n","import { ContactItem, Name, Btn } from './Contact.styled';\nimport PropTypes from 'prop-types';\nimport { RiDeleteBin6Fill } from 'react-icons/ri';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItem>\n      <Name>\n        {name}: {number}\n      </Name>\n      <Btn\n        type=\"button\"\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n        <RiDeleteBin6Fill style={{ marginLeft: '5px' }} />\n      </Btn>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 7px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  background-color: rgb(235, 235, 235);\n`;\n","import { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport { Contact } from '../Contact/Contact';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, number, id }) => (\n        <Contact key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  text-align: center;\n  color: tomato;\n  font-size: 24px;\n`;\n","import { Message } from './InfoMessage.styled';\n\nexport const InfoMessage = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../redux/contacts/selectors';\n\nimport { SectionWrapper } from '../UI/SectionWrapper/SectionWrapper';\nimport { ContactForm } from '../components/ContactForm';\nimport { Filter } from '../components/Filter';\nimport { ContactList } from '../components/ContactList';\nimport { InfoMessage } from '../components/InfoMessage';\nimport { Spinner } from '../UI/Spinner/Spinner';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <SectionWrapper title=\"Add new contact\">\n        <ContactForm />\n      </SectionWrapper>\n\n      <SectionWrapper title=\"Contact List\">\n        {isLoading && !error && <Spinner />}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <InfoMessage message={'Contact List is empty'} />\n        )}\n      </SectionWrapper>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Section","styled","Title","SectionWrapper","title","children","Button","notifyOptions","position","fontSize","clickToClose","width","timeout","backOverlay","warning","background","notiflixIconColor","theme","createTheme","palette","primary","main","indigo","secondary","ContactForm","useState","name","setName","number","setPhone","useSelector","dispatch","useDispatch","handleChangeForm","e","target","currentTarget","value","reset","onSubmit","preventDefault","form","elements","some","contact","toLowerCase","Notify","addContact","ThemeProvider","TextField","onChange","type","label","pattern","required","variant","color","sx","ml","mt","Wrapper","Filter","fullWidth","margin","size","event","filterContacts","ContactItem","Name","Btn","Contact","id","onClick","deleteContact","style","marginLeft","List","ContactList","normalizedFilter","visibleContacts","includes","map","Message","InfoMessage","message","Contacts","useEffect","fetchContacts","Spinner","length"],"sourceRoot":""}